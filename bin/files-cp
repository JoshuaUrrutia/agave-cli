#!/usr/bin/env python
"""
    Usage: files-cp [OPTIONS] SOURCE DESTINATION

Copy files to, from, and on Tapis storage system.
System paths must be specified as Agave URIs (agave://).

    Example:
        files-cp file.ext agave://systemId/path/file.ext

        files-cp agave://systemId/path/to/file.ext local.ext

        files-cp agave://systemId/file.ext agave://systemId/new.ext

Flags:
    -c, --cachedir    Session cache directory.
"""
from __future__ import print_function
import argparse
import os
import sys
from argparse import RawTextHelpFormatter
from agavepy.agave import Agave
from agavepy import utils

parser = argparse.ArgumentParser(formatter_class=RawTextHelpFormatter,
                                 description="Copy files to, from, and on Tapis storage system.\n\n" +
                                 "System paths must be specified as Agave URIs (agave://).\n\nExamples:\n" +
                                 "    files-cp file.ext agave://systemId/path/file.ext\n" +
                                 "    files-cp agave://systemId/path/to/file.ext local.ext\n" +
                                 "    files-cp agave://systemId/file.ext agave://systemId/new.ext")

parser.add_argument(
    "-c",
    "--cachedir",
    default=utils.credentials_cache_dir(),
    help="Session cache directory.")

parser.add_argument(
    "source",
    action="store",
    help="Source (storage systems prefix with agave://)")

parser.add_argument(
    "destination",
    action="store",
    help="Destination (storage systems prefix with agave://)")

if __name__ == "__main__":
    try:
        args = parser.parse_args()
        cache_dir = args.cachedir
        source = args.source
        destination = args.destination

        agave = Agave()
        agave.load_client(cache_dir)

        # Refresh tokens if necessary.
        agave.refresh_tokens()
        # Save out session cache
        if agave.client_name is not None:
            agave.save_configs(cache_dir)

        # Parse source and destination arguments.
        source_remote = False
        destination_remote = False
        if source.startswith("agave://"):
            source_remote = True
            source = source[len("agave://"):]

        if destination.startswith("agave://"):
            destination_remote = True
            destination = destination[len("agave://"):]

        # Copy file from one location to another within a Tapis system.
        if source_remote and destination_remote:
            agave.files_copy(source, destination)
        # Download a file from a remote system to the host.
        elif source_remote and not destination_remote:
            destination = os.path.abspath(destination)
            agave.files_download(source, destination)
        # Upload a fle from the host to a remote system.
        elif not source_remote and destination_remote:
            source = os.path.abspath(source)
            agave.files_upload(source, destination)

        sys.exit(0)

    except Exception as err:
        print(err)
        sys.exit(1)
