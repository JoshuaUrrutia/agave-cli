#!/usr/bin/env python
"""
    auth-sessions-switch [OPTION]

Switches between configured Oauth clients on the host

 Options:
    -t, --tenant       Tenant id.
    -u, --username     Username.
    -N, --client_name  Name of the client.
    -p, --password     Password.
    -c, --cachedir     Session cache directory.
"""
from __future__ import print_function
from agavepy import utils
from agavepy.agave import Agave, AgaveError
import argparse
import os
import sys
import json

parser = argparse.ArgumentParser(
    description="Switches between configured Oauth clients on the host")

parser.add_argument("-t", "--tenant", help="Tenant id for session.")
parser.add_argument("-u", "--username", help="Username.")
parser.add_argument("-N", "--name", dest="client_name",
                    help="Name of the client.")
parser.add_argument("-r", "--no-refresh", dest="norefresh",
                    action="store_true",
                    help="Do not create or refresh tokens after switching.")
parser.add_argument("-p", "--password", default=None,
                    help="Password.")

parser.add_argument(
    "-c",
    "--cachedir",
    default=utils.credentials_cache_dir(create=False),
    help="Session cache directory.")

if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = args.username
    password = args.password
    client_name = args.client_name

    # Pick up existing client_name in context if it is configured
    context = utils.bootstrap_context(
        cache_dir, tenantid=tenant_id, username=username,
        client_name=client_name)

    config_file = utils.sessions_cache_path(cache_dir)
    # Check if there is a session already saved.
    if os.path.exists(config_file):

        # # Default to contents of 'current'
        # config = json.load(open(config_file, 'rb'))
        # current_client_name = list(config['current'])[0]
        # current_username = config['current'][current_client_name]['username']
        # current_tenant_id = config['current'][current_client_name]['tenantid']

        # if username != current_username and username is None:
        #     username = current_username
        # if client_name != current_client_name and client_name is None:
        #     client_name = current_client_name
        # if tenant_id != current_tenant_id and tenant_id is None:
        #     tenant_id = current_tenant_id

        try:
            agave.load_configs(
                cache_dir=cache_dir,
                tenant_id=context['tenantid'],
                username=context['username'],
                client_name=context['client_name'])

            username = agave.username
            tenant_id = agave.tenant_id
            client_name = agave.client_name

        except (KeyError, TypeError):
            print('Could not find client {} for {} on tenant {}'.format(
                context['client_name'], context['username'],
                context['tenantid']))
            sys.exit(1)
        except Exception as err:
            print(err)
            sys.exit(1)

    if args.norefresh:
        utils.print_stderr(
            'Client {0} was loaded but token was not refreshed'.format(client_name))

    # Now, try to run a refresh token
    try:
        if (agave.token is not None and agave.token != '' and
            agave.refresh_token is not None
                and agave.refresh_token != ''):
            utils.print_stderr(
                'Refreshing access token for {}...'.format(agave.client_name))
            agave.refresh_tokens()
            if agave.token != '':
                print(agave.token)
                # Save session.
                agave.save_configs(cache_dir)
                sys.exit(0)
            else:
                raise AgaveError('Refresh failed')
    except Exception:
        pass

    # Still going. Try to create an access token
    try:
        utils.print_stderr(
            'Creating an access token for {}...'.format(agave.client_name))
        agave.get_access_token(
            password=utils.prompt_password(password, quiet=True), quiet=True)
        # Save session.
        if agave.token != '':
            print(agave.token)
            agave.save_configs(cache_dir)
            sys.exit(0)
        else:
            raise AgaveError('Create failed')
    except Exception as err:
        print('Token generation failed:')
        print(err)
        sys.exit(1)
