#!/usr/bin/env python
"""
    auth-tokens-create [OPTION]

Create an Oauth access token for an active Tapis Oauth client.

 Options:
    -u, --username     Tapis username.
    -p, --password     Tapis password.
    -k, --apikey       Oauth client key.
    -s, --apisecret    Oauth client secret.
    -x, --tokenuser    Tapis username to impersonate
    -D, --displayonly  Display but do not store access token
    -c, --cachedir     Directory where session configurations are saved
"""
from __future__ import print_function
import argparse
import os
import sys
from agavepy.agave import Agave
from agavepy import utils

parser = argparse.ArgumentParser(
    description="Create an Oauth access token for an active Tapis Oauth client.")

parser.add_argument("-u", "--username", default=None, help="Tapis username.")
parser.add_argument("-p", "--password", default=None, help="Tapis password.")
parser.add_argument("-t", "--tenant", default=None,
                    help="Tenant id for session.")
parser.add_argument("-k", "--apikey", default=None,
                    help="Oauth client key.")
parser.add_argument("-s", "--apisecret", default=None,
                    help="Oauth client secret.")
parser.add_argument("-x", "--tokenuser",
                    help="Tapis username to impersonate (requires elevated permissions).")
parser.add_argument("-D", "--displayonly", dest="displayonly",
                    action="store_true",
                    help="Display but do not store tokens.")
parser.add_argument("-S", "--storetoken", dest="storetoken",
                    action="store_true",
                    help="Store tokens for later use (default).")
parser.add_argument(
    "-c",
    "--cachedir",
    default=os.path.expanduser("~/.agave"),
    help="Directory to save confiurations in.")
parser.add_argument(
    "--tenants",
    default="https://api.tacc.utexas.edu/tenants",
    help="URL with tenants listings.")

if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = args.username
    password = args.password
    api_key = args.apikey
    api_secret = args.apisecret
    impersonate = args.tokenuser
    display_only = args.displayonly
    # Don't cache tokens if generated for the purposes of impersonation
    if impersonate is not None and impersonate != '':
        display_only = True

    # Init an Agave client from the CLI options alone
    if api_key is not None and api_secret is not None and \
            username is not None and tenant_id is not None:
        utils.print_stderr('Instantiating Oauth client from options')
        agave.username = username
        agave.api_key = api_key
        agave.api_secret = api_secret
        agave.password = utils.get_password(
            password, username=username, quiet=False)
        password = agave.password
        if tenant_id is not None:
            agave.tenant_id = tenant_id
        try:
            agave.init(args.tenants)
        except KeyError:
            utils.print_stderr("Select a valid tenant id.")
            agave.list_tenants()
            sys.exit(1)
        # Don't cache tokens if the client was configured purely from args
        display_only = True
    else:
        utils.print_stderr('Loading current Oauth client configuration')
        config_file = os.path.join(cache_dir, 'config.json')
        # Check if there may be a session already saved.
        if os.path.exists(config_file):
            try:
                agave.load_configs(
                    cache_dir=cache_dir)
            except KeyError:
                raise

    utils.print_stderr("Creating Oauth access token...")
    agave.get_access_token(username=username, password=password, quiet=True)
    print(agave.token)

    # Save session.
    if not display_only:
        agave.save_configs(cache_dir)
    else:
        utils.print_stderr('Tokens were not stored.')
