#!/usr/bin/env python
"""
    auth-session-init [OPTION]

Creates a new Tapis API client application and generates a set of Oauth tokens.

 Options:
    -t, --tenant       Tenant id for session.
    -u, --username     Session username.
    -p, --password     Session password.
    -N, --client_name  Name of client.
    -D, --description  Description of the client.
    -c, --cachedir     Directory where session configurations are saved
"""
from __future__ import print_function
import argparse
import datetime
import os
import sys
import json
from agavepy.agave import Agave
from agavepy import utils
from agavepy.clients import random_client_name

parser = argparse.ArgumentParser(
    description="Create a new Tapis API client application and generate a set of Oauth tokens.")

parser.add_argument("-t", "--tenant", default=None,
                    help="Tenant id for session.")
parser.add_argument("-u", "--username", default=None, help="Tapis username.")
parser.add_argument("-p", "--password", default=None, help="Tapis password.")
parser.add_argument("-N", "--name", dest="client_name", help="Name of client.")
parser.add_argument("-D", "--description", help="Description of client.")
parser.add_argument("-f", "--force", dest="force",
                    action="store_true",
                    help="Force creation of a new session.")

parser.add_argument(
    "-c",
    "--cachedir",
    default=os.path.expanduser("~/.agave"),
    help="Directory to save confiurations in.")

parser.add_argument(
    "--tenants",
    default="https://api.tacc.utexas.edu/tenants",
    help="URL with tenants listings.")

if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = args.username
    password = args.password
    client_name = args.client_name
    client_description = args.description
    do_force = args.force

    config_file = os.path.join(cache_dir, 'config.json')

    # Check if there is a session already saved.
    if os.path.exists(config_file):

        # Default to contents of 'current'
        config = json.load(open(config_file, 'rb'))
        current_client_name = list(config['current'])[0]
        current_username = config['current'][current_client_name]['username']
        current_tenant_id = config['current'][current_client_name]['tenantid']

        if username != current_username and username is None:
            username = current_username
        if tenant_id != current_tenant_id and tenant_id is None:
            tenant_id = current_tenant_id
        if client_name != current_client_name and client_name is None:
            client_name = current_client_name

        try:
            # utils.print_stderr('Loading {} from disk for {} on {}'.format(
            #     client_name, username, tenant_id))
            agave.load_configs(
                cache_dir=cache_dir,
                tenant_id=tenant_id,
                username=username,
                client_name=client_name)

            username = agave.username
            tenant_id = agave.tenant_id
            client_name = agave.client_name

            # utils.print_stderr('Loaded {} from disk for {} on {}'.format(
            #     client_name, username, tenant_id))
        except (KeyError, TypeError):
            utils.print_stderr('Failed to load session from disk')
            pass

        if do_force:
            client_name = None

    # Set tenant info.
    if agave.tenant_id is None:
        if tenant_id is not None:
            agave.tenant_id = tenant_id
        try:
            agave.init(args.tenants)
        except KeyError:
            utils.print_stderr("Select a valid tenant id.")
            agave.list_tenants()
            sys.exit(1)

    # Create client if necessary.
    if agave.client_name is None or agave.client_name != client_name:
        if client_name is None:
            client_name = random_client_name(hostname=True)
        else:
            utils.print_stderr(
                "Client '{}' is not saved in {}, so it will now be created.".
                format(client_name, cache_dir))
        if client_description is None:
            client_description = "Autogenerated {}".format(
                datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"))

        utils.print_stderr(
            "Creating client {}...".format(client_name))
        username = utils.get_username(username)
        password = utils.get_password(password, username=username, quiet=False)
        agave.clients_create(
            client_name, client_description,
            username=username, password=password, quiet=True)
        utils.print_stderr(
            "Created client {} - {}".format(client_name, client_description))

        # Zero out token and refresh token.
        agave.token = None
        agave.refresh_token = None

    # Get access token or refresh if necessary.
    if isinstance(agave.token, str) and isinstance(agave.refresh_token, str):
        if agave.token != "" and agave.refresh_token != "":
            agave.refresh_tokens()
    else:
        utils.print_stderr("Getting Oauth bearer tokens...")
        agave.get_access_token(
            username=username, password=password, quiet=True)

    print(agave.token)

    # Save session.
    agave.save_configs(cache_dir)
