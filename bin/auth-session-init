#!/usr/bin/env python
"""
    auth-session-init [OPTION]

Creates a new Tapis API client application and generates a set of Oauth tokens.

 Options:
    -t, --tenant       Tenant id for session.
    -u, --username     Session username.
    -p, --password     Session password.
    -N, --client_name  Name of client.
    -D, --description  Description of the client.
    -c, --cachedir     Directory where session configurations are saved
"""
from __future__ import print_function
import argparse
import datetime
import os
import socket
import sys
from agavepy.agave import Agave
from agavepy import utils

parser = argparse.ArgumentParser(
    description="Create a new Tapis API client application and generate a set of Oauth tokens.")

parser.add_argument("-t", "--tenant", help="Tenant id for session.")
parser.add_argument("-u", "--username", help="Tapis username.")
parser.add_argument("-p", "--password", default=None, help="Tapis password.")
parser.add_argument("-N", "--name", dest="client_name", help="Name of client.")
parser.add_argument("-D", "--description", help="Description of client.")

parser.add_argument(
    "-c",
    "--cachedir",
    default=os.path.expanduser("~/.agave"),
    help="Directory to save confiurations in.")

parser.add_argument(
    "--tenants",
    default="https://api.tacc.utexas.edu/tenants",
    help="URL with tenants listings.")

if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = utils.get_username(args.username)
    password = utils.get_password(
        args.password, username=username, quiet=False)
    client_name = args.client_name
    client_description = args.description

    config_file = os.path.join(cache_dir, 'config.json')
    # Check if there is a session already saved.
    if os.path.exists(config_file):
        try:
            agave.load_configs(
                cache_dir=cache_dir,
                tenant_id=tenant_id,
                username=username,
                client_name=client_name)
        except KeyError:
            pass

    # Set tenant info.
    if agave.tenant_id is None:
        if tenant_id is not None:
            agave.tenant_id = tenant_id
        try:
            agave.init(args.tenants)
        except KeyError:
            utils.print_stderr("Select a valid tenant id.")
            agave.list_tenants()
            sys.exit(1)

    # Create client if necessary.
    if agave.client_name is None or agave.client_name != client_name:
        if client_name is None:
            client_name = socket.gethostname()
        else:
            utils.print_stderr("Client '{}' is not saved in {}, so we will create it...".
                               format(client_name, cache_dir))
        if client_description is None:
            client_description = "Autogenerated {}".format(
                datetime.datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ"))

        utils.print_stderr("Creating a client...")
        agave.clients_create(
            client_name, client_description,
            username=username, password=password, quiet=True)
        utils.print_stderr(
            "Created client {} - {}".format(client_name, client_description))

        # Zero out token and refresh token.
        agave.token = None
        agave.refresh_token = None

    # Get access token or refresh if necessary.
    if isinstance(agave.token, str) and isinstance(agave.refresh_token, str):
        if agave.token != "" and agave.refresh_token != "":
            agave.refresh_tokens()
    else:
        utils.print_stderr("Getting oauth bearer tokens...")
        agave.get_access_token(
            username=username, password=password, quiet=True)

    # Save session.
    agave.save_configs(cache_dir)
