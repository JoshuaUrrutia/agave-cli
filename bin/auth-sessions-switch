#!/usr/bin/env python
"""
    auth-sessions-switch [OPTION]

Switches between configured Tapis Oauth API clients on the host

 Options:
    -t, --tenant       Tenant id.
    -u, --username     Tapis username.
    -N, --client_name  Name of client.
    -p, --password     Tapis password (optional).
    -c, --cachedir     Directory where session configurations are saved.
"""
from __future__ import print_function
from agavepy import utils
from agavepy.agave import Agave
import argparse
import os
import json

parser = argparse.ArgumentParser(
    description="Switch between configured Tapis Oauth API clients on the host")

parser.add_argument("-t", "--tenant", help="Tenant id for session.")
parser.add_argument("-u", "--username", help="Tapis username.")
parser.add_argument("-N", "--name", dest="client_name", help="Name of client.")
parser.add_argument("-r", "--no-refresh", dest="norefresh",
                    action="store_true",
                    help="Do not create or refresh tokens after switching.")
parser.add_argument("-p", "--password", default=None, help="Tapis password.")

parser.add_argument(
    "-c",
    "--cachedir",
    default=os.path.expanduser("~/.agave"),
    help="Directory to save confiurations in.")

if __name__ == "__main__":
    args = parser.parse_args()

    agave = Agave()
    cache_dir = args.cachedir
    tenant_id = args.tenant
    username = args.username
    password = args.password
    client_name = args.client_name

    config_file = os.path.join(cache_dir, 'config.json')
    # Check if there is a session already saved.
    if os.path.exists(config_file):

        # Default to contents of 'current'
        config = json.load(open(config_file, 'rb'))
        current_client_name = list(config['current'])[0]
        current_username = config['current'][current_client_name]['username']
        current_tenant_id = config['current'][current_client_name]['tenantid']

        if username != current_username and username is None:
            username = current_username
        if client_name != current_client_name and client_name is None:
            client_name = current_client_name
        if tenant_id != current_tenant_id and tenant_id is None:
            tenant_id = current_tenant_id

        try:
            agave.load_configs(
                cache_dir=cache_dir,
                tenant_id=tenant_id,
                username=username,
                client_name=client_name)

            username = agave.username
            tenant_id = agave.tenant_id
            client_name = agave.client_name

        except (KeyError, TypeError):
            raise
            # raise ValueError(
            #     'Cannot load client {}'.format(client_name))

    # Get access token or refresh if necessary.
    if not args.norefresh:
        utils.print_stderr("Getting Oauth tokens...")
        if isinstance(agave.token, str) and isinstance(agave.refresh_token, str):
            if agave.token != "" and agave.refresh_token != "":
                agave.refresh_tokens()
                utils.print_stderr("Oauth tokens were refreshed.")
        else:
            agave.get_access_token(
                username=username, password=password, quiet=True)
            utils.print_stderr("Oauth tokens were created.")

    # Save session.
    agave.save_configs(cache_dir)
    utils.print_stderr('Client {} now active for {} on {}'.format(
        client_name, username, tenant_id))
